COMPONENT
============================================================
BROWSE ITEMS
============================================================
import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import { getToken, getUser } from '../Utils/Common';
import Axios from 'axios';

class BrowseAllItems extends Component {


    constructor(props) {
        super(props);

        this.state = {
            items: [],
            responseError: ""
        }
    }

    getFoodItems = () => {
        Axios.get("http://localhost:3001/foodItems")
            .then((res) => {
                const eventsList = res.data;
                this.setState({ items: eventsList });
            })
            .catch(err => {
                console.log("There is some error : ", err);
            })
    }


    deleteNote(id) {
        Axios.delete('http://localhost:3001/foodItem/' + id, {
            headers: {
                "x-auth-token": getToken()
            }
        })
            .then((result) => {
                alert("Item deleted successfully !");
                this.getFoodItems();
            })
            .catch(err => console.log("There is some error : " + err));
    }



    componentDidMount = () => {
        this.getFoodItems();
    }


    render() {
        return (
            <div className="container">
                <h3>{this.state.items.length > 0 ? "Here You Go !!" : "OOPS, Sorry no items found."}</h3>
                <br />
                {getUser() !== null ? <Link to="/itemAdd" className="btn btn-info" >Add New Item</Link> : <Link to="/itemAdd" className="btn btn-secondary disabled">Login to add new item</Link>}
                <br /><br />
                <div className="row">
                    {this.state.items.map((eventValue, index) => {
                        return (
                            <div key={index} className="col-sm-3 mt-3">
                                <div key={index} className="card rounded border border-success">
                                    <div key={index} className="card-body">
                                        <h3 className="card-title text-danger title">{eventValue.name}</h3>
                                        <p className="card-text">Category: {eventValue.category}</p>
                                        <p className="card-title">Brand: {eventValue.brand}</p>
                                        <p className="card-title">Price: {eventValue.price}</p>
                                        <Link to={'/itemDetail/' + eventValue._id} className="btn btn-primary btn-sm">View and Buy</Link>
                                        {getToken() !== null ? <button onClick={this.deleteNote.bind(this, eventValue._id)} style={{ margin: 2 }} className="btn btn-danger btn-sm">Delete</button> : ""}
                                        {getToken() !== null ? <Link to={'/itemEdit/' + eventValue._id} style={{ margin: 2 }} className="btn btn-info btn-sm">Edit</Link> : ""}
                                    </div>
                                </div>
                            </div>
                        )
                    })}
                </div>
            </div >
        )
    }

}

export default BrowseAllItems;
============================================================
CART
============================================================
import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import { getToken, getUser } from '../Utils/Common';
import Axios from 'axios';

class Cart extends Component {


    constructor(props) {
        super(props);

        this.state = {
            items: [],
            sum: 0
        }
    }


    update = () => {
        const name = this.props.match.params.name;
        const category = this.props.match.params.cat;
        const qty = this.props.match.params.qty;
        const price = this.props.match.params.price;

        const object = {
            name: name,
            category: category,
            qty: qty,
            price: price
        }

        this.setState({
            items: [...this.state.items, object]
        })
    }


    render() {
        return (
            <div className="container" style={{ textAlign: "center" }}>
                <div className="container" style={{ margin: "10px" }}>
                    <Link to={"/payment"} className="btn btn-success btn-lg">Make Payment</Link>
                </div>
                <div className="container">
                    <button onClick={this.update} className="btn btn-primary btn-sm">See Cart Items</button>
                </div>

                <div className="row">
                    {this.state.items.map((eventValue, index) => {

                        return (
                            <div key={index} className="col-sm-3 mt-3">
                                <div key={index} className="card rounded border border-success">
                                    <div key={index} className="card-body">
                                        <h3 className="card-title text-danger title">{eventValue.name}</h3>
                                        <p className="card-text">Category: {eventValue.category}</p>
                                        <p className="card-title">Quantity: {eventValue.qty}</p>
                                        <p className="card-title">Price: {eventValue.price}</p>
                                    </div>
                                </div>
                            </div>
                        )
                    })}
                </div>
            </div>
        )
    }

}

export default Cart;
============================================================
CHANGE PASSWARD
============================================================
import React, { Component } from 'react';
import { removeUserSession, getUser, getToken } from '../Utils/Common';
import Axios from 'axios';

class ChangePassword extends Component {

    constructor(props) {
        super(props);

        this.state = {
            sentOldPass: "",
            newPass: "",
            submitError: "",
            formErrors: {
                sentOldPass: "",
                newPass: ""
            }
        }
    }

    handleChangePass = (event) => {
        event.preventDefault();

        const reqObject = {
            sentOldPass: this.state.sentOldPass,
            newPass: this.state.newPass
        };


        Axios.put("http://localhost:3001/admin/changepassword/" + getUser().id, reqObject, {
            headers: {
                "x-auth-token": getToken()
            }
        })
            .then(res => {
                console.log("Changed !!!!!");
                removeUserSession();
                this.props.history.push("/login");
            })
            .catch(error => {
                // console.log(error);
                this.setState({
                    submitError: error.response.data.message
                });
            })
    }


    handleChange = (event) => {
        event.preventDefault();
        const { name, value } = event.target;
        let formErrors = this.state.formErrors;

        switch (name) {
            case "sentOldPass":
                formErrors.sentOldPass = value.length < 8 ? "Minimum 8 characters are required" : "";
                break;
            case "newPass":
                formErrors.newPass = value.length < 8 ? "Minimum 8 characters are required" : "";
                break;
            default:
                break;
        }

        this.setState({ formErrors, [name]: value }, () => { console.log(this.state) });
    }

    render() {

        const { formErrors } = this.state;

        return (
            <div className="container" style={{ width: "60%" }}>
                <form onSubmit={this.handleChangePass}>
                    <div className="form-group">
                        <label htmlFor="sentOldPass">Old Password</label>
                        <input type="password" className={`form-control ${formErrors.sentOldPass.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange} id="sentOldPass"
                            name="sentOldPass"
                            placeholder="Old Password" />
                        {formErrors.sentOldPass.length > 0 && (<span>{formErrors.sentOldPass}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="newPass">New Password</label>
                        <input type="password" className={`form-control ${formErrors.newPass.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange} id="newPass"
                            name="newPass"
                            placeholder="New Password" />
                        {formErrors.newPass.length > 0 && (<span>{formErrors.newPass}</span>)}
                    </div>
                    {this.state.submitError && <><div className="alert alert-danger" role="alert">{this.state.submitError}</div><br /></>}<br />
                    <button type="submit" className="btn btn-primary">Submit</button>
                </form>
            </div>
        )
    }

}


export default ChangePassword;
=============================================================
FILTERED ITEMS 
=============================================================
import React, { Component } from 'react';
import { Link } from 'react-router-dom';


class FilteredItems extends Component {

    constructor(props) {
        super(props);

        this.state = {
            items: this.props.items
        }
    }

    render() {
        return (

            <div className="container">
                <div className="row">
                    {this.state.items.map((itemValue, index) => {
                        return (
                            <div key={index} className="col-sm-3 mt-3">
                                <div key={index} className="card rounded border border-success">
                                    <div key={index} className="card-body">
                                        <h3 className="card-title text-danger title">{itemValue.name}</h3>
                                        <p className="card-text">Category: {itemValue.category}</p>
                                        <p className="card-title">Price: {itemValue.price}</p>
                                        <Link to={'/itemDetail/' + itemValue._id} className="btn btn-primary btn-sm">Details</Link>
                                    </div>
                                </div>
                            </div>
                        )
                    })}
                </div>
            </div>
        )
    }
}


export default FilteredItems;
=============================================================
FOOD ITEMS EDIT
=============================================================
import React, { Component } from 'react';
import { getUser, getToken } from '../Utils/Common';
import Axios from 'axios';

class FoodItemEdit extends Component {

    constructor(props) {
        super(props);

        this.state = {
            name: "",
            category: "Coffee",
            brand: "",
            description: "",
            price: 0,
            containerType: "Pouch",
            submitError: null,
            formErrors: {
                name: "",
                description: "",
                category: "",
                brand: "",
                price: "",
                containerType: ""
            }
        }
    }


    handleSubmit = (event) => {
        event.preventDefault();

        const reqObject = {
            name: this.state.name,
            category: this.state.category,
            brand: this.state.brand,
            description: this.state.description,
            price: this.state.price,
            containerType: this.state.containerType
        }


        Axios.put("http://localhost:3001/foodItem/" + this.props.match.params.id, reqObject, {
            headers: {
                "x-auth-token": getToken()
            }
        })
            .then(res => {
                const data = res.data;
                console.log(data);
                this.setState({
                    name: data.name,
                    category: data.category,
                    brand: data.brand,
                    description: data.description,
                    price: data.price,
                    containerType: data.containerType
                })

                this.props.history.push("/items")
            })
            .catch(error => {
                this.setState({
                    submitError: error.response.data.message
                });
            })
    }

    componentDidMount = () => {
        Axios.get('http://localhost:3001/foodItem/' + this.props.match.params.id)
            .then(res => {
                const data = res.data;

                this.setState({
                    name: data.name,
                    category: data.category,
                    brand: data.brand,
                    description: data.description,
                    price: data.price,
                    containerType: data.containerType
                })
            })
            .catch(err => console.log("There is some error : " + err));
    }

    handleChange = (event) => {
        event.preventDefault();
        const { name, value } = event.target;
        let formErrors = this.state.formErrors;

        switch (name) {
            case "name":
                formErrors.name = value.length < 3 ? "Minimum 3 characters are required" : "";
                break;
            case "brand":
                formErrors.brand = value.length < 2 ? "Minimum 2 characters are required" : "";
                break;
            case "description":
                formErrors.description = value.length < 20 ? "Minimum 20 characters are required" : "";
                break;
            case "price":
                formErrors.price = value.length < 0 ? "Price cannot be negative !" : "";
                break;
            default:
                break;
        }

        this.setState({ formErrors, [name]: value }, () => { console.log(this.state) });
    }


    render() {

        const { formErrors } = this.state;

        return (
            <div className="container" style={{ width: "60%" }}>
                <form onSubmit={this.handleSubmit}>
                    <div className="form-group">
                        <label htmlFor="name">Name</label>
                        <input type="text" name="name"
                            className={`form-control ${formErrors.name.length > 0 ? "is-invalid" : null}`} id="name"
                            onChange={this.handleChange}
                            value={this.state.name || ''} />
                        {formErrors.name.length > 0 && (<span>{formErrors.name}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="category">Category</label>
                        <select name="category" className="form-control"
                            value={this.state.category || ''}
                            onChange={this.handleChange} id="category">
                            <option>Coffee</option>
                            <option>Dals and Pulses</option>
                            <option>Ghee and Oils</option>
                            <option>Atta and flours</option>
                            <option>Masala and spices</option>
                            <option>Nuts</option>
                            <option>Sugar and salt</option>
                            <option>Snacks</option>
                            <option>Tea</option>
                            <option>Soft Drinks</option>
                            <option>Juices</option>
                            <option>Noddles and Pasta</option>
                            <option>Chocolates, Sweets and Jams</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label htmlFor="brand">Brand</label>
                        <input type="text" name="brand" id="brand"
                            className={`form-control ${formErrors.brand.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange}
                            value={this.state.brand || ''} />
                        {formErrors.brand.length > 0 && (<span>{formErrors.brand}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="description">Description</label>
                        <textarea name="description" id="description"
                            className={`form-control ${formErrors.description.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange}
                            value={this.state.description || ''}
                            rows="3"></textarea>
                        {formErrors.description.length > 0 && (<span>{formErrors.description}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="price">Price</label>
                        <input type="number" name="price" id="price"
                            className={`form-control ${formErrors.price.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange}
                            value={this.state.price || ''} />
                        {formErrors.price.length > 0 && (<span>{formErrors.price}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="containerType">Container Type</label>
                        <select name="containerType"
                            className="form-control"
                            onChange={this.handleChange}
                            id="containerType"
                            value={this.state.containerType || ''}>
                            <option>Pouch</option>
                            <option>Bottle</option>
                            <option>Can</option>
                            <option>Cartoon</option>
                        </select>
                    </div>
                    {this.state.submitError && <><div className="alert alert-danger" role="alert">{this.state.submitError}</div><br /></>}
                    <button type="submit" className="btn btn-primary">Submit</button>
                </form>
            </div>
        )
    }

}

export default FoodItemEdit;
============================================================
FOOD ITEMS ADD
============================================================
import React, { Component } from 'react';
import { getUser, getToken } from '../Utils/Common';
import Axios from 'axios';

class FoodItemAdd extends Component {

    constructor(props) {
        super(props);

        this.state = {
            name: "",
            category: "Coffee",
            brand: "",
            description: "",
            price: 0,
            containerType: "Pouch",
            submitError: null,
            formErrors: {
                name: "",
                description: "",
                category: "",
                brand: "",
                price: "",
                containerType: ""
            }
        }
    }


    handleSubmit = (event) => {
        event.preventDefault();

        const reqObject = {
            name: this.state.name,
            category: this.state.category,
            brand: this.state.brand,
            description: this.state.description,
            price: this.state.price,
            containerType: this.state.containerType
        }


        Axios.post("http://localhost:3001/foodItem", reqObject, {
            headers: {
                "x-auth-token": getToken()
            }
        })
            .then(res => {
                this.props.history.push("/items")
            })
            .catch(error => {
                if (error.response.status === 400 || error.response.status === 500) {
                    this.setState({
                        submitError: error.response.data.message
                    });
                }
                else {
                    this.setState({
                        submitError: "Something went wrong. Please try again later."
                    });
                }
            })

    }

    handleChange = (event) => {
        event.preventDefault();
        const { name, value } = event.target;
        let formErrors = this.state.formErrors;

        switch (name) {
            case "name":
                formErrors.name = value.length < 3 ? "Minimum 3 characters are required" : "";
                break;
            case "brand":
                formErrors.brand = value.length < 2 ? "Minimum 2 characters are required" : "";
                break;
            case "description":
                formErrors.description = value.length < 20 ? "Minimum 20 characters are required" : "";
                break;
            case "price":
                formErrors.price = value.length < 0 ? "Price cannot be negative !" : "";
                break;
            default:
                break;
        }

        this.setState({ formErrors, [name]: value }, () => { console.log(this.state) });
    }


    render() {

        const { formErrors } = this.state;

        return (
            <div className="container" style={{ width: "60%" }}>
                <form onSubmit={this.handleSubmit}>
                    <div className="form-group">
                        <label htmlFor="name">Name</label>
                        <input type="text" name="name"
                            className={`form-control ${formErrors.name.length > 0 ? "is-invalid" : null}`} id="name"
                            onChange={this.handleChange} />
                        {formErrors.name.length > 0 && (<span>{formErrors.name}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="category">Category</label>
                        <select name="category" className="form-control" onChange={this.handleChange} id="category">
                            <option>Coffee</option>
                            <option>Dals and Pulses</option>
                            <option>Ghee and Oils</option>
                            <option>Atta and flours</option>
                            <option>Masala and spices</option>
                            <option>Nuts</option>
                            <option>Sugar and salt</option>
                            <option>Snacks</option>
                            <option>Tea</option>
                            <option>Soft Drinks</option>
                            <option>Juices</option>
                            <option>Noddles and Pasta</option>
                            <option>Chocolates, Sweets and Jams</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label htmlFor="brand">Brand</label>
                        <input type="text" name="brand" id="brand"
                            className={`form-control ${formErrors.brand.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange} />
                        {formErrors.brand.length > 0 && (<span>{formErrors.brand}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="description">Description</label>
                        <textarea name="description" id="description"
                            className={`form-control ${formErrors.description.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange} rows="3"></textarea>
                        {formErrors.description.length > 0 && (<span>{formErrors.description}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="price">Price</label>
                        <input type="number" name="price" id="price"
                            className={`form-control ${formErrors.price.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange} />
                        {formErrors.price.length > 0 && (<span>{formErrors.price}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="containerType">Container Type</label>
                        <select name="containerType" className="form-control" onChange={this.handleChange} id="containerType">
                            <option>Pouch</option>
                            <option>Bottle</option>
                            <option>Can</option>
                            <option>Cartoon</option>
                        </select>
                    </div>
                    {this.state.submitError && <><div className="alert alert-danger" role="alert">{this.state.submitError}</div><br /></>}
                    <button type="submit" className="btn btn-primary">Submit</button>
                </form>
            </div>
        )
    }

}

export default FoodItemAdd;
============================================================
HOME
============================================================
import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import Axios from 'axios';
import { getUser } from '../Utils/Common';
import FilteredItems from './FilteredItems';



class Home extends Component {

    constructor(props) {
        super(props);

        this.state = {
            category: "Coffee",
            maxPrice: 0,
            containerType: "Pouch",
            submitError: "",
            items: []
        }
    }


    handleSubmit = (event) => {
        event.preventDefault();

        this.setState({
            items: []
        });

        const reqObject = {
            category: this.state.category,
            maxPrice: this.state.maxPrice,
            containerType: this.state.containerType
        }

        console.log(reqObject);

        if (this.state.price < 0) {
            this.setState({
                submitError: "Enter a valid price !"
            });
        }
        else {
            Axios.post("http://localhost:3001/foodItems/filter", reqObject, {
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(res => {
                    console.log(res);
                    if (res.data.length > 0) {
                        this.setState({ items: res.data, submitError: "" });
                    } else {
                        this.setState({
                            submitError: "No items Found !"
                        });
                    }
                })
                .catch(error => {
                    this.setState({
                        submitError: error.response.data.message
                    });
                })
        }
    }

    handleChange = (event) => {
        event.preventDefault();
        const { name, value } = event.target;
        this.setState({ [name]: value }, () => { console.log(this.state) });
    }

    render() {
        return (
            <div className="container">
                <h1 className="title" style={{ color: "purple", marginTop: "0.5%", fontSize: 30 }}>Welcome {getUser() !== null ? getUser().name : ""} to KitchenStory.com </h1><br />
                <p className="title" style={{ color: "brown" }}><span style={{ fontWeight: "bold" }}>Buying food items made smooth. </span>Use the app to burn your hunger !!</p>
                <p className="title" style={{ color: "brown" }}><span style={{ fontWeight: "bold" }}> Buy what you want. </span>
                Browse through all the
                items by going through the navigation bar link. </p>


                <div className="container">
                    <div className="container" style={{ width: "60%" }}>
                        <form onSubmit={this.handleSubmit}>
                            <div className="form-group">
                                <label htmlFor="category">Category</label>
                                <select name="category" className="form-control" onChange={this.handleChange} id="category">
                                    <option>Coffee</option>
                                    <option>Dals and Pulses</option>
                                    <option>Ghee and Oils</option>
                                    <option>Atta and flours</option>
                                    <option>Masala and spices</option>
                                    <option>Nuts</option>
                                    <option>Sugar and salt</option>
                                    <option>Snacks</option>
                                    <option>Tea</option>
                                    <option>Soft Drinks</option>
                                    <option>Juices</option>
                                    <option>Noddles and Pasta</option>
                                    <option>Chocolates, Sweets and Jams</option>
                                </select>
                            </div>
                            <div className="form-group">
                                <label htmlFor="maxPrice">Max Price</label>
                                <input type="number" name="maxPrice"
                                    className="form-control"
                                    id="maxPrice" onChange={this.handleChange} />
                            </div>
                            <div className="form-group">
                                <label htmlFor="containerType">Container Type</label>
                                <select name="containerType" className="form-control" onChange={this.handleChange} id="containerType">
                                    <option>Pouch</option>
                                    <option>Bottle</option>
                                    <option>Can</option>
                                    <option>Cartoon</option>
                                </select>
                            </div>
                            {this.state.submitError && <><div className="alert alert-danger" role="alert">{this.state.submitError}</div><br /></>}
                            <button type="submit" className="btn btn-primary">Search</button>
                        </form>
                    </div>
                    <div className="container" style={{ marginBottom: "50px" }}>
                        {
                            this.state.items.length > 0 ?
                                <div className="container" style={{ marginTop: 20 }}>
                                    <div className="alert alert-success" role="alert">Bravo !! Found some items.</div>
                                    <FilteredItems items={this.state.items} />
                                </div> : ""
                        }</div>
                </div>

            </div>
        )
    }

}

export default Home;
=============================================================
ITEMS DETAILS
=============================================================
import Axios from 'axios';
import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import { getUser } from '../Utils/Common';


class ItemDetail extends Component {

    constructor(props) {
        super(props);

        this.state = {
            item: {},
            qty: 0
        }

    }

    componentDidMount = () => {

        Axios.get('http://localhost:3001/fooditem/' + this.props.match.params.id)
            .then(res => {
                this.setState({ item: res.data });
            })
            .catch(err => console.log("There is some error : " + err));
    }

    handleChange = (event) => {
        event.preventDefault();
        const { name, value } = event.target;

        this.setState({ [name]: value }, () => { console.log(this.state) });
    }


    render() {
        return (
            <div className="container">
                <div className="panel panel-default">
                    <div className="panel-heading">
                        <h3 className="panel-title">
                            Details of <span className="text-success">{this.state.item.name}</span>
                        </h3>
                        <br />
                    </div>

                    <div className="container">
                        <div className="panel-body">
                            <table className="table">
                                <tbody>
                                    <tr>
                                        <th>Name</th>
                                        <td>{this.state.item.name}</td>
                                    </tr>
                                    <tr>
                                        <th>Category</th>
                                        <td>{this.state.item.category}</td>
                                    </tr>
                                    <tr>
                                        <th>Brand</th>
                                        <td>{this.state.item.brand}</td>
                                    </tr>
                                    <tr>
                                        <th>Description</th>
                                        <td>{this.state.item.description}</td>
                                    </tr>
                                    <tr>
                                        <th>Container Type</th>
                                        <td>{this.state.item.containerType}</td>
                                    </tr>
                                    <tr>
                                        <th>Price</th>
                                        <td>{this.state.item.price}</td>
                                    </tr>
                                    <tr>
                                        <div class="col-xs-2">
                                            <th><label for="ex1">Quantity</label></th>
                                            <input class="form-control" name="qty" onChange={this.handleChange} id="ex1" type="text" />
                                        </div>
                                    </tr>
                                    <tr>
                                        <td>
                                            <Link to="/items" className="btn btn-info">Back to Browsing Events</Link>
                                        </td>
                                        <td>
                                            <Link to={"/cart/" + this.state.item.name + "/" + this.state.item.category + "/" + this.state.qty + "/" + (this.state.qty * this.state.item.price)} className="btn btn-info">Add and view cart</Link>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            </div >

        )
    }


}


export default ItemDetail;
=============================================================
LOGIN
=============================================================
import React, { Component } from 'react';
import { removeUserSession, setUserSession, getUser } from '../Utils/Common';
import Axios from 'axios';



const emailRegex = RegExp(
    /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/
);


class Login extends Component {

    constructor(props) {
        super(props);

        this.state = {
            email: "",
            password: "",
            submitError: null,
            loading: false,
            formErrors: {
                email: "",
                password: ""
            }
        }
    }


    handleLogin = (event) => {
        event.preventDefault();
        this.setState({
            submitError: null,
            loading: true
        });

        const reqObject = {
            email: this.state.email,
            password: this.state.password
        }


        Axios.post("http://localhost:3001/auth/admin/login", reqObject)
            .then(res => {
                this.setState({
                    loading: false
                });

                setUserSession(res.data.token, res.data.admin);
                this.props.history.push("/");
            })
            .catch(error => {
                this.setState({
                    loading: false
                });
                if (error.response.status === 400 || error.response.status === 500) {
                    this.setState({
                        submitError: error.response.data.message
                    });
                }
                else {
                    this.setState({
                        submitError: "Something went wrong. Please try again later."
                    });
                }
            })

    }


    handleChange = (event) => {
        event.preventDefault();
        const { name, value } = event.target;
        let formErrors = this.state.formErrors;

        switch (name) {
            case "email":
                formErrors.email = emailRegex.test(value) && value.length >= 5 ? "" : "Invalid Email Address !";
                break;
            case "password":
                formErrors.password = value.length < 8 ? "Minimum 8 characters are required" : "";
                break;
            default:
                break;
        }

        this.setState({ formErrors, [name]: value }, () => { console.log(this.state) });
    }


    render() {

        const { formErrors } = this.state;

        return (
            <div className="container" style={{ width: "60%" }}>

                {!getUser() ?
                    <form onSubmit={this.handleLogin}>
                        <div className="form-group">
                            <label htmlFor="email">Email address</label>
                            <input type="email" className={`form-control ${formErrors.email.length > 0 ? "is-invalid" : null}`}
                                onChange={this.handleChange} id="email"
                                name="email" placeholder="Enter email" />
                            {formErrors.email.length > 0 && (<span>{formErrors.email}</span>)}
                        </div>
                        <div className="form-group">
                            <label htmlFor="password">Password</label>
                            <input type="password" className={`form-control ${formErrors.password.length > 0 ? "is-invalid" : null}`}
                                onChange={this.handleChange} id="password"
                                name="password"
                                placeholder="Password" />
                            {formErrors.password.length > 0 && (<span>{formErrors.password}</span>)}
                        </div>
                        {this.state.submitError && <><div className="alert alert-danger" role="alert">{this.state.submitError}</div><br /></>}<br />
                        <button type="submit" className="btn btn-primary">Login</button>
                    </form> : ""}
            </div>
        )
    }

}


export default Login;
=============================================================
MAIN
============================================================
import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';

import PrivateRoute from '../Utils/PrivateRoute';
import { getToken, removeUserSession } from '../Utils/Common';
import Home from './Home';
import SignUp from './SignUp';
import Login from './Login';
import ChangePassword from './ChangePassword';
import FoodItemAdd from './FoodItemAdd';
import BrowseAllItems from './BrowseAllItems';
import ItemDetail from './ItemDetail';
import FoodItemEdit from './FoodItemEdit';
import Cart from './Cart';
import PaymentSuccess from './PaymentSucess';


class Main extends Component {

    constructor(props) {
        super(props);

        this.state = {
            loggedIn: false
        }
    }


    handleLogout = (event) => {
        event.preventDefault();
        removeUserSession();
        this.setState({ loggedIn: false });
    }


    handleLogin = (event) => {
        this.setState({ loggedIn: true });
    }

    render() {
        return (
            <div className="container" style={{ marginTop: 20 }}>
                <Router>
                    <div className="container">
                        <nav className="navbar navbar-expand-lg navbar-dark bg-dark">
                            <Link to={'/'} className="navbar-brand">KitchenStory.com</Link>

                            <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
                                <span className="navbar-toggler-icon"></span>
                            </button>
                            <div className="collapse navbar-collapse" id="collapsibleNavbar">
                                <ul className="navbar-nav mr-auto">
                                    <li className="nav-item">
                                        <Link to={'/items'} className="nav-link" style={{ color: "white" }}>Browse Food Items</Link>
                                    </li>
                                    <li className="nav-item">
                                        <Link to={'/itemAdd'} className="nav-link" style={{ color: "white" }}>Add Food Item</Link>
                                    </li>
                                </ul>
                                <ul className="navbar-nav ml-auto">
                                    <li className="nav-item .ml-auto">
                                        <Link to={'/changePass'} className="nav-link" style={{ color: "white" }}>Change Password</Link>
                                    </li>
                                    <li className="nav-item">
                                        <Link to={'/signUp'} onClick={this.handleLogin} className="nav-link" style={{ color: "white" }}>Sign Up</Link>
                                    </li>
                                    {getToken() != null ? "" : <li className="nav-item .ml-auto">
                                        <Link to={'/login'} onClick={this.handleLogin} className="nav-link" style={{ color: "white" }}>Login</Link>
                                    </li>}
                                    {getToken() != null ? <li className="nav-item .ml-auto">
                                        <button onClick={this.handleLogout} className="btn btn-danger" style={{ color: "white" }}>Logout</button>
                                    </li> : ""}
                                </ul>
                            </div>
                        </nav> <br />
                    </div>
                    <Switch>
                        <Route exact path="/" component={Home} />
                        <Route exact path="/signUp" component={SignUp} />
                        <Route exact path="/logout" change={true} component={Login} />
                        <Route exact path="/login" component={Login} />
                        <Route exact path="/items" component={BrowseAllItems} />
                        <Route exact path="/itemDetail/:id" component={ItemDetail} />
                        <Route exact path="/payment" component={PaymentSuccess} />
                        <Route exact path="/cart/:name/:cat/:qty/:price" component={Cart} />
                        <PrivateRoute exact path="/itemAdd" component={FoodItemAdd} />
                        <PrivateRoute exact path="/itemEdit/:id" component={FoodItemEdit} />
                        <PrivateRoute exact path="/changePass" component={ChangePassword} />
                    </Switch>
                </Router>
            </div>
        )
    }
}

export default Main;
=============================================================
PAYMENT SUCCESS
=============================================================
import Axios from 'axios';
import React, { Component } from 'react';
import { Link } from 'react-router-dom';



class PaymentSuccess extends Component {

    render() {
        return (
            <div className="container" style={{ textAlign: "center" }}>
                <div class="alert alert-success">
                    <strong>Payement Success !</strong>
                </div>
                <Link to="/items" className="btn btn-info">Back To Items</Link>
            </div>
        )
    }


}


export default PaymentSuccess;
=============================================================
SIGN UP
=============================================================
import React, { Component } from 'react';
import { getUser } from '../Utils/Common';
import Axios from 'axios';

const emailRegex = RegExp(
    /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/
);


class SignUp extends Component {

    constructor(props) {
        super(props);

        this.state = {
            name: "",
            email: "",
            phone: 0,
            username: "",
            password: "",
            submitError: "",
            formErrors: {
                name: "",
                email: "",
                phone: "",
                username: "",
                password: "",
            }
        }
    }


    handleSignUp = (event) => {
        event.preventDefault();
        this.setState({
            submitError: null
        });

        const reqObject = {
            name: this.state.name,
            email: this.state.email,
            phone: this.state.phone,
            username: this.state.username,
            password: this.state.password
        }


        Axios.post("http://localhost:3001/admin/signup", reqObject)
            .then(res => {
                alert("Signup Successful !")
                this.props.history.push("/login");
            })
            .catch(error => {
                if (error.response.status === 400 || error.response.status === 500) {
                    this.setState({
                        submitError: error.response.data.message
                    });
                }
                else {
                    this.setState({
                        submitError: "Something went wrong. Please try again later."
                    });
                }
            })

    }


    handleChange = (event) => {
        event.preventDefault();
        const { name, value } = event.target;
        let formErrors = this.state.formErrors;

        switch (name) {
            case "name":
                formErrors.name = value.length < 3 ? "Minimum 3 characters are required" : "";
                break;
            case "email":
                formErrors.email = emailRegex.test(value) && value.length >= 5 ? "" : "Invalid Email Address !";
                break;
            case "phone":
                formErrors.phone = value.length < 10 ? "Minimum 10 digits are required" : "";
                break;
            case "username":
                formErrors.username = value.length < 5 ? "Minimum 5 characters are required" : "";
                break;
            case "password":
                formErrors.password = value.length < 8 ? "Minimum 8 characters are required" : "";
                break;
            default:
                break;
        }

        this.setState({ formErrors, [name]: value }, () => { console.log(this.state) });
    }



    render() {

        const { formErrors } = this.state;

        return (
            <div className="container" style={{ width: "60%" }}>
                {getUser() ? <div className="alert alert-success" role="alert">You are already signed up !</div> : <form onSubmit={this.handleSignUp}>
                    <div className="form-group">
                        <label htmlFor="name">Name</label>
                        <input type="text" className={`form-control ${formErrors.name.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange} id="name"
                            name="name" placeholder="Enter name" />
                        {formErrors.name.length > 0 && (<span>{formErrors.name}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="email">Email address</label>
                        <input type="email" className={`form-control ${formErrors.email.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange} id="email"
                            name="email" placeholder="Enter email" />
                        {formErrors.email.length > 0 && (<span>{formErrors.email}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="phone">Phone</label>
                        <input type="number" className={`form-control ${formErrors.phone.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange} id="phone"
                            name="phone" placeholder="Enter phone" />
                        {formErrors.phone.length > 0 && (<span>{formErrors.phone}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="username">Username</label>
                        <input type="text" className={`form-control ${formErrors.username.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange} id="username"
                            name="username" placeholder="Enter username" />
                        {formErrors.username.length > 0 && (<span>{formErrors.username}</span>)}
                    </div>
                    <div className="form-group">
                        <label htmlFor="password">Password</label>
                        <input type="password" className={`form-control ${formErrors.password.length > 0 ? "is-invalid" : null}`}
                            onChange={this.handleChange} id="password"
                            name="password"
                            placeholder="Password" />
                        {formErrors.password.length > 0 && (<span>{formErrors.password}</span>)}
                    </div>
                    {this.state.submitError && <><div className="alert alert-danger" role="alert">{this.state.submitError}</div><br /></>}<br />
                    <button type="submit" className="btn btn-primary">Submit</button>
                </form>}
            </div>
        )
    }

}


export default SignUp; 
=========================================================